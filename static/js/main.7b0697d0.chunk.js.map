{"version":3,"sources":["components/Form/Form.jsx","components/ListContacts/ListContacts.jsx","components/Filter/Filter.jsx","App.jsx","index.js"],"names":["Form","onSubmit","useState","name","setName","number","setNumber","nameInputId","uuidv4","numberInputID","type","e","preventDefault","id","htmlFor","value","pattern","title","required","onChange","currentTarget","ListContacts","contacts","onClick","map","Filter","handler","App","JSON","parse","window","localStorage","getItem","setContacts","filter","setFilter","useEffect","setItem","stringify","filterValueNorm","toLowerCase","filteredContactList","contact","includes","className","data","dataLowerCase","itemToFind","find","alert","prevState","event","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6RAIe,SAASA,EAAT,GAA6B,IAAbC,EAAY,EAAZA,SAC7B,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KAEQC,EAAcC,cAChBC,EAAgBD,cAkBtB,OACI,uBAAME,KAAK,SAAST,SATH,SAACU,GACpBA,EAAEC,iBACFX,EAAS,CAAEY,GAAIL,cAAUL,KAAKA,EAAME,OAAOA,IAC3CD,EAAQ,IACRE,EAAU,KAKR,UACE,wBAAOQ,QAASP,EAAhB,iBAEE,uBACEQ,MAAOZ,EACPU,GAAIN,EACJG,KAAK,OACLP,KAAK,OACLa,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,EACRC,SA5BiB,SAACR,GAC1BP,EAASO,EAAES,cAAcL,aA8BrB,wBAAOD,QAASL,EAAhB,mBAEE,uBACEM,MAAOV,EACPQ,GAAIJ,EACJC,KAAK,MACLP,KAAK,SACLa,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,EACRC,SAtCoB,SAACR,GAC7BL,EAAWK,EAAES,cAAcL,aAyCvB,wBAAQL,KAAK,SAAb,4BCpDO,SAASW,EAAT,GAA4C,IAArBC,EAAoB,EAApBA,SAAUC,EAAU,EAAVA,QAExC,OAAQ,6BACPD,EAASE,KAAI,gBAAEX,EAAF,EAAEA,GAAIV,EAAN,EAAMA,KAAME,EAAZ,EAAYA,OAAZ,OACZ,+BACGF,EADH,IACUE,EACR,wBAAQkB,QAAS,kBAAMA,EAAQV,IAAKH,KAAK,SAAzC,sBAFOG,QCJnB,IAeeY,EAfA,SAAC,GAAwB,IAAtBV,EAAqB,EAArBA,MAAOW,EAAc,EAAdA,QACjBb,EAAKL,cACX,OACE,qCACE,uBAAOM,QAASD,IAChB,uBAAOA,GAAIA,EAAIH,KAAK,OAAOK,MAAOA,EAAOI,SAAUO,QCD1C,SAASC,IAEvB,MAAgCzB,oBAAS,kCAAM0B,KAAKC,MAAMC,OAAOC,aAAaC,QAAQ,oBAA7C,QAA4D,MAArG,mBAAOV,EAAP,KAAiBW,EAAjB,KACD,EAA4B/B,mBAAS,IAArC,mBAAOgC,EAAP,KAAeC,EAAf,KAeEC,qBAAU,WACRL,aAAaM,QAAQ,WAAYT,KAAKU,UAAUhB,MAC/C,CAACA,IAEJ,IAMMiB,EAAkBL,EAAOM,cACrBC,EAAsBnB,EAASY,QAAO,SAACQ,GAAD,OAC5CA,EAAQvC,KAAKqC,cAAcG,SAASJ,MAG1C,OACM,sBAAKK,UAAU,MAAf,UACE,2CACA,cAAC5C,EAAD,CAAMC,SA/Bc,SAAC4C,GACzB,IAAMC,EAAgBD,EAAK1C,KAAKqC,cAC1BO,EAAazB,EAAS0B,MAC1B,SAACN,GAAD,OAAaA,EAAQvC,KAAKqC,gBAAkBM,KAE1CC,EACFE,MAAM,GAAD,OAAIF,EAAW5C,KAAf,4BAGL8B,GAAY,SAACiB,GAAD,4BAAmBA,GAAnB,CAA8BL,UAuBxC,0CACA,gDACA,cAAC,EAAD,CAAQ9B,MAAOmB,EAAQR,QAjBR,SAACyB,GACpBhB,EAAUgB,EAAM/B,cAAcL,UAiB1B,cAACM,EAAD,CACEC,SAAUmB,EACVlB,QAjBmB,SAACV,GAC1BoB,EAAYX,EAASY,QAAO,SAACQ,GAAD,OAAaA,EAAQ7B,KAAOA,YC7B5DuC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.7b0697d0.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function Form({ onSubmit }) {\r\n  const [name, setName] = useState('')\r\n  const [number, setNumber] = useState('')\r\n\r\n    const nameInputId = uuidv4();\r\n  const numberInputID = uuidv4();\r\n\r\n    const handleNameChange = (e) => {\r\n    setName( e.currentTarget.value);\r\n  };\r\n     const handleNumberChange = (e) => {\r\n    setNumber( e.currentTarget.value);\r\n  };\r\n\r\n  \r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    onSubmit({ id: uuidv4(), name:name, number:number });\r\n    setName(\"\");\r\n    setNumber(\"\");\r\n  };\r\n\r\n\r\n  return (\r\n      <form type=\"submit\" onSubmit={handleSubmit}>\r\n        <label htmlFor={nameInputId}>\r\n          Name\r\n          <input\r\n            value={name}\r\n            id={nameInputId}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            onChange={handleNameChange}\r\n          />\r\n        </label>\r\n        <label htmlFor={numberInputID}>\r\n          Number\r\n          <input\r\n            value={number}\r\n            id={numberInputID}\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n            onChange={handleNumberChange}\r\n          />\r\n        </label>\r\n\r\n        <button type=\"submit\">Add contact</button>\r\n      </form>\r\n    );\r\n}\r\n\r\n// Form.propTypes = {\r\n//     onSubmit: PropTypes.func.isRequired,\r\n//   };\r\n\r\n// class Form extends Component {\r\n//   state = {\r\n//     name: \"\",\r\n//     number: \"\",\r\n//   };\r\n\r\n//   static propTypes = {\r\n//     onSubmit: PropTypes.func.isRequired,\r\n//   };\r\n\r\n//   nameInputId = uuidv4();\r\n//   numberInputID = uuidv4();\r\n\r\n//   handleInputChnage = (e) => {\r\n//     const { name, value } = e.currentTarget;\r\n//     this.setState({ [name]: value });\r\n//   };\r\n\r\n//   handleSubmit = (e) => {\r\n//     e.preventDefault();\r\n//     this.props.onSubmit({ id: uuidv4(), ...this.state });\r\n//     this.reset();\r\n//   };\r\n\r\n//   reset() {\r\n//     this.setState({ name: \"\", number: \"\" });\r\n//   }\r\n\r\n//   render() {\r\n//     return (\r\n//       <form type=\"submit\" onSubmit={this.handleSubmit}>\r\n//         <label htmlFor={this.nameInputId}>\r\n//           Name\r\n//           <input\r\n//             value={this.state.name}\r\n//             id={this.nameInputId}\r\n//             type=\"text\"\r\n//             name=\"name\"\r\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n//             title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n//             required\r\n//             onChange={this.handleInputChnage}\r\n//           />\r\n//         </label>\r\n//         <label htmlFor={this.numberInputID}>\r\n//           Number\r\n//           <input\r\n//             value={this.state.number}\r\n//             id={this.numberInputID}\r\n//             type=\"tel\"\r\n//             name=\"number\"\r\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n//             title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n//             required\r\n//             onChange={this.handleInputChnage}\r\n//           />\r\n//         </label>\r\n\r\n//         <button type=\"submit\">Add contact</button>\r\n//       </form>\r\n//     );\r\n//   }\r\n// }\r\n\r\n\r\n","import React, { } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n\r\nexport default function ListContacts({contacts, onClick}) {\r\n\r\n        return( <ul>\r\n        {contacts.map(({id, name, number}) => (\r\n          <li key={id}>\r\n            {name} {number}\r\n            <button onClick={() => onClick(id)} type=\"button\">\r\n              delete\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>)\r\n}\r\n  \r\nListContacts.propTypes = {\r\n    data: PropTypes.oneOfType([\r\n      PropTypes.string,\r\n      PropTypes.number,\r\n      PropTypes.array,\r\n    ]),\r\n    onClick: PropTypes.func.isRequired,\r\n  };\r\n\r\n//  class oldContacts extends Component {\r\n//   static defaultProps = {\r\n//     contacts: [],\r\n//   };\r\n\r\n//   static propTypes = {\r\n//     contacts: PropTypes.oneOfType([\r\n//       PropTypes.string,\r\n//       PropTypes.number,\r\n//       PropTypes.array,\r\n//     ]),\r\n//     onClick: PropTypes.func.isRequired,\r\n//   };\r\n\r\n//   state = { contacts: this.props.contacts };\r\n\r\n//   handleClick = (id) => {\r\n//     this.props.onClick(id);\r\n//   };\r\n\r\n//   render() {\r\n//     const data = this.props.contacts;\r\n//     return (\r\n//       <ul>\r\n//         {data.map((contact) => (\r\n//           <li key={contact.id}>\r\n//             {contact.name} {contact.number}\r\n//             <button onClick={() => this.handleClick(contact.id)} type=\"button\">\r\n//               delete\r\n//             </button>\r\n//           </li>\r\n//         ))}\r\n//       </ul>\r\n//     );\r\n//   }\r\n// }\r\n\r\n","import React from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Filter = ({ value, handler }) => {\r\n  const id = uuidv4();\r\n  return (\r\n    <>\r\n      <label htmlFor={id}></label>\r\n      <input id={id} type=\"text\" value={value} onChange={handler} />\r\n    </>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  handler: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;\r\n","import \"./App.css\";\r\nimport React, { useState, useEffect } from \"react\";\r\n// import PropTypes from \"prop-types\";\r\nimport Form from \"./components/Form/Form\";\r\nimport ListContacts from \"./components/ListContacts/ListContacts\";\r\nimport Filter from \"./components/Filter/Filter\";\r\n// import { v4 as uuidv4 } from \"uuid\";\r\n\r\nexport default function App() {\r\n\r\n const [contacts, setContacts] = useState(() => JSON.parse(window.localStorage.getItem(\"contacts\")) ??[])\r\nconst [filter, setFilter] = useState('')\r\n\r\n  const formSubmitHandler = (data) => {\r\n    const dataLowerCase = data.name.toLowerCase();\r\n    const itemToFind = contacts.find(\r\n      (contact) => contact.name.toLowerCase() === dataLowerCase\r\n    );\r\n    if (itemToFind) {\r\n      alert(`${itemToFind.name} is already in contacts`);\r\n      return\r\n    } else {\r\n      setContacts((prevState) => [...prevState, data]);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"contacts\", JSON.stringify(contacts));\r\n  }, [contacts])\r\n\r\n  const handleFilter = (event) => {\r\n    setFilter(event.currentTarget.value);\r\n  };\r\n   const handleClickDelete = (id) => {\r\n    setContacts(contacts.filter((contact) => contact.id !== id));\r\n  };\r\n  const filterValueNorm = filter.toLowerCase();\r\n      const filteredContactList = contacts.filter((contact) =>\r\n      contact.name.toLowerCase().includes(filterValueNorm)\r\n    );\r\n\r\nreturn(\r\n      <div className=\"App\">\r\n        <h3>Phonebook</h3>\r\n        <Form onSubmit={formSubmitHandler} />\r\n        <h3>Contacts</h3>\r\n        <p>filter via name</p>\r\n        <Filter value={filter} handler={handleFilter} />\r\n        <ListContacts\r\n          contacts={filteredContactList}\r\n          onClick={handleClickDelete}\r\n        />\r\n      </div>\r\n)\r\n}\r\n\r\n\r\n// class OldApp extends Component {\r\n//   static defaultProps = {\r\n//     contacts: [],\r\n//   };\r\n//   static propTypes = {\r\n//     contacts: PropTypes.array.isRequired,\r\n//   };\r\n\r\n//   state = {\r\n//     contacts: [\r\n//       { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\r\n//       { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\r\n//       { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\r\n//       { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\r\n//     ],\r\n//     filter: \"\",\r\n//   };\r\n\r\n//   componentDidMount() {\r\n//     const contacts = localStorage.getItem(\"contacts\");\r\n//     if (contacts) {\r\n//       const paresedContacts = JSON.parse(contacts);\r\n//       this.setState({ contacts: paresedContacts });\r\n//     }\r\n//   }\r\n\r\n//   componentDidUpdate(prevProps, prevState) {\r\n//     if (this.state.contacts !== prevState.contacts) {\r\n//       localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\r\n//     }\r\n//   }\r\n\r\n//   formSubmitHandler = (data) => {\r\n//     const dataLowerCase = data.name.toLowerCase();\r\n//     const itemToFind = this.state.contacts.find(\r\n//       (contact) => contact.name.toLowerCase() === dataLowerCase\r\n//     );\r\n//     if (itemToFind) {\r\n//       alert(`${itemToFind.name} is already in contacts`);\r\n//     } else {\r\n//       this.setState((prevState) => ({\r\n//         contacts: [...prevState.contacts, data],\r\n//       }));\r\n//     }\r\n//   };\r\n\r\n//   handleFilter = (e) => {\r\n//     this.setState({\r\n//       filter: e.currentTarget.value,\r\n//     });\r\n//   };\r\n\r\n//   handleClickDelete = (id) => {\r\n//     this.setState({\r\n//       contacts: this.state.contacts.filter((contact) => contact.id !== id),\r\n//     });\r\n//   };\r\n\r\n//   render() {\r\n//     const { contacts, value } = this.state;\r\n//     const filterValueNorm = this.state.filter.toLowerCase();\r\n//     const filteredContactList = contacts.filter((contact) =>\r\n//       contact.name.toLowerCase().includes(filterValueNorm)\r\n//     );\r\n//     return (\r\n//       <div className=\"App\">\r\n//         <h3>Phonebook</h3>\r\n//         <Form onSubmit={this.formSubmitHandler} />\r\n//         <h3>Contacts</h3>\r\n//         <p>filter via name</p>\r\n//         <Filter value={value} handler={this.handleFilter} />\r\n//         <Contacts\r\n//           contacts={filteredContactList}\r\n//           onClick={this.handleClickDelete}\r\n//         />\r\n//       </div>\r\n//     );\r\n//   }\r\n// }","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App.jsx\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}